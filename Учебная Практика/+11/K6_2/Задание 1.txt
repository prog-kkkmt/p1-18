Задание 1. Подготовить инструкцию по использованию модулей math и cmath.

					Модули math и cmath.

Первый дает вам доступ к гиперболическим, тригонометрическим и логарифмическим функциям для действительных чисел, 
а последний позволяет работать с комплексными числами. Также все возвращаемые значения - это float.

Арифметические функции
Эти функции выполняют различные арифметические операции, такие как вычисление пола, 
потолка или абсолютного значения числа с использованием функций floor(x), ceil(x) и fabs(x) 
соответственно. Функция ceil(x) вернет наименьшее целое число, которое больше или равно x. 
Аналогично, floor(x) возвращает наибольшее целое число, меньшее или равное x. Функция fabs(x)
возвращает абсолютное значение x.

Вы также можете выполнять нетривиальные операции, такие как вычисление факториала числа 
с использованием factorial(x). Факториал является произведением целого числа и всех 
положительных целых чисел, меньших его. Он широко используется при работе с комбинациями и перестановками. 
Его также можно использовать для вычисления значения функций синуса и косинуса.

import math
 
def getsin(x):
 
    multiplier = 1
    result = 0
     
  for i in range(1,20,2):
        result += multiplier*pow(x,i)/math.factorial(i)
        multiplier *= -1
         
    return result
     
 
getsin(math.pi/2) # returns 1.0
getsin(math.pi/4) # returns 0.7071067811865475
Еще одна полезная функция в модуле math - gcd(x, y), которая дает вам наибольший общий делитель 
(GCD) двух чисел x и y. Когда x и y оба не равны нулю, эта функция возвращает наибольшее 
положительное целое число, которое делит как x, так и y. Вы можете косвенно использовать 
его для вычисления наименьшего общего кратного двух чисел, используя следующую формулу:

gcd(a, b) x lcm(a, b) = a x b
Вот несколько арифметических функций, которые предлагает Python:

import math
 
math.ceil(1.001)    # returns 2
math.floor(1.001)   # returns 1
math.factorial(10)  # returns 3628800
math.gcd(10,125)    # returns 5
 
math.trunc(1.001)   # returns 1
math.trunc(1.999)   # returns 1

				Тригонометрические функции

Эти функции связывают углы треугольника по бокам. У них много приложений, 
в том числе изучение треугольников и моделирование периодических явлений, 
таких как звуковые и световые волны. Имейте в виду, что угол, который вы предоставляете, 
находится в радианах.

Вы можете рассчитать sin(x), cos(x) и tan(x) непосредственно с помощью этого модуля. 
Однако нет прямой формулы для вычисления cosec(x), sec(x) и cot(x), 
но их значение равно обратному значению, возвращаемому sin(x), cos(x) и tan(x) соответственно.

Вместо того, чтобы вычислять значение тригонометрических функций под определенным углом, 
вы также можете сделать обратный и рассчитать угол, в котором они имеют заданное значение, 
используя asin(x), acos(x) и atan(x).

		Математический модуль обеспечивает функцию hypot(a, b) для вычисления длины гипотенузы.

import math
 
math.sin(math.pi/4)    # returns 0.7071067811865476
math.cos(math.pi)      # returns -1.0
math.tan(math.pi/6)    # returns 0.5773502691896257
math.hypot(12,5)       # returns 13.0
 
math.atan(0.5773502691896257) # returns 0.5235987755982988
math.asin(0.7071067811865476) # returns 0.7853981633974484

				Гиперболические функции

Гиперболические функции являются аналогами тригонометрических функций, 
которые основаны на гиперболе вместо круга. В тригонометрии точки (cos b, sin b) 
представляют точки единичного круга. В случае гиперболических функций точки (cosh b, sinh b)
представляют точки, которые образуют правую половину равносторонней гиперболы.

Точно так же, как тригонометрические функции, вы можете непосредственно 
вычислить значение sinh(x), cosh(x) и tanh(x). 
Остальные значения могут быть рассчитаны с использованием различных отношений между этими тремя значениями. 
Существуют также другие функции asinh(x), acosh(x) и atanh(x), которые могут быть использованы 
для вычисления обратных соответствующих гиперболических значений.

import math
 
math.sinh(math.pi)    # returns 11.548739357257746
math.cosh(math.pi)    # returns 11.591953275521519
math.cosh(math.pi)    # returns 0.99627207622075
 
math.asinh(11.548739357257746)   # returns 3.141592653589793
math.acosh(11.591953275521519)   # returns 3.141592653589793
math.atanh(0.99627207622075)     # returns 3.141592653589798

Так как math.pi равно примерно 3.141592653589793, когда мы использовали asinh()
для значения, возвращаемого sinh(math.pi), мы получили нашу pi обратно.

				Степень и логарифмические функции

Вероятнее всего, вы чаще всего сталкиваетесь со степенями и логарифмами, 
чем с гиперболическими или тригонометрическими функциями. К счастью, модуль 
math предоставляет множество функций, которые помогут нам вычислить логарифмы.

Вы можете использовать log(x, [base]) для вычисления log заданного числа x для данной базы. 
Если вы оставите необязательный аргумент базы, log x будет вычисляться до базы e. 
Здесь e - математическая константа, значение которой равно 2.71828182 .... 
и к ней можно получить доступ с использованием math.e. 
Кстати, Python также позволяет вам получить доступ к другой константе pi, используя math.pi.

Если вы хотите рассчитать значения логарифма base-2 или base-10, 
использование log2(x) и log10(x) вернет более точные результаты, 
чем log(x, 2) и log(x, 10). Имейте в виду, что функция log3(x) отсутствует, 
поэтому вам нужно будет использовать log(x, 3) для вычисления значений логарифма базы-3. 
То же самое касается всех других баз.

Если значение, логарифм которого вы вычисляете, очень близко к 1, 
вы можете использовать log1p(x). 1p в log1p означает 1 плюс. 
Поэтому log1p(x) вычисляет log(1 + x), где x близок к нулю. 
Однако результаты более точны с log1p(x).

Вы также можете рассчитать значение числа x, возведённого в степень y, используя pow(x, y). 
Перед вычислением степени эта функция преобразует оба аргумента в тип float. 
Если вы хотите, чтобы конечный результат был вычислен в точных целых степенях, 
вы должны использовать встроенную функцию pow() или оператор **.

Вы также можете вычислить квадратный корень любого заданного числа x, используя sqrt(x), 
но то же самое можно также сделать, используя pow(x, 0.5).

import math
 
math.exp(5)                      # returns 148.4131591025766
math.e**5                        # returns 148.4131591025765
 
math.log(148.41315910257657)     # returns 5.0
math.log(148.41315910257657, 2)  # returns 7.213475204444817
math.log(148.41315910257657, 10) # returns 2.171472409516258
 
math.log(1.0000025)              # returns 2.4999968749105643e-06
math.log1p(0.0000025)            # returns 2.4999968750052084e-06
 
math.pow(12.5, 2.8)              # returns 1178.5500657314767
math.pow(144, 0.5)               # returns 12.0
math.sqrt(144)                   # returns 12.0

					Сложные числа

Сложные числа хранятся внутри с использованием прямоугольных или декартовых координат. 
Комплексное число z будет представлено в декартовых координатах как z = x + iy, 
где x представляет действительную часть, а y представляет собой мнимую часть. 
Другим способом их представления является использование полярных координат.

В этом случае комплексное число z будет определяться комбинацией модуля r и фазового угла phi. 
Модуль r является расстоянием между комплексным числом z и началом. 
Угол phi - угол против часовой стрелки, измеренный в радианах от положительной оси x до отрезка линии, 
соединяющего z и начало координат.

При работе с комплексными числами модуль cmath может оказать большую помощь. 
Модуль комплексного числа может быть рассчитан с использованием встроенной функции abs(), 
и его фаза может быть рассчитана с использованием функции phase(z), доступной в модуле cmath. 
Вы можете преобразовать комплексное число в прямоугольной форме в полярную форму, используя polar(z),
 которая вернет пару (r, phi), где r - abs(z), а phi - phase(z).

Аналогично, вы можете преобразовать комплексное число в полярной форме в прямоугольную форму с помощью rect(r, phi). 
Комплексное число, возвращаемое этой функцией, равно r * (math.cos (phi) + math.sin (phi) * 1j).

import cmath
 
cmath.polar(complex(1.0, 1.0)) # returns (1.4142135623730951, 0.7853981633974483)
 
cmath.phase(complex(1.0, 1.0)) # returns 0.7853981633974483
 
abs(complex(1.0, 1.0)) # returns 1.4142135623730951

Модуль cmath также позволяет использовать регулярные математические функции со сложными числами. 
Например, вы можете вычислить квадратный корень из комплексного числа, 
используя sqrt(z) или его косинус, используя cos(z).

import cmath
 
cmath.sqrt(complex(25.0, 25.0)) # returns (5.49342056733905+2.2754493028111367j)
 
cmath.cos(complex(25.0, 25.0)) 	# returns (35685729345.58163+4764987221.458499j)

Комплексные числа имеют множество приложений, 
таких как моделирование электрических цепей, динамика жидкости и анализ сигналов. 
Если вам нужно работать над любой из этих вещей, модуль cmath не разочарует вас.




